name: encryptJSON file
on: workflow_dispatch
jobs:
  download_json:
    runs-on: self-hosted
    environment:
      dev
    steps:
      - name: Download JSON file
        run: |
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/DivyaPrabhavathi/Maven/main/NSI.json" -OutFile "NSI.json"
        shell: powershell
      - name: Assign values to JSON file
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          ENV_NAME: ${{ secrets.ENV_NAME }}
        run: |
          # Read JSON file
          $json = Get-Content NSI.json -Raw | ConvertFrom-Json
          $json.Sphere.USERNAME = "$env:DOCKER_USERNAME"
          $json.Sphere.PASSWORD = "$env:DOCKER_PASSWORD"
          $json.Sphere.NAME = "$env:ENV_NAME"
          $json | ConvertTo-Json | Set-Content -Path NSI.json
        shell: powershell
      - name: Encrypt JSON file and store the key
        run: |
         # Generate encryption key
         $key = New-Object Byte[] 32
         [Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($key)
         $keyPath = "$env:GITHUB_WORKSPACE/encryption_key.key"
         [System.IO.File]::WriteAllBytes($keyPath, $key)
         # Encrypt the JSON file
         $jsonPath = "$env:GITHUB_WORKSPACE/NSI.json"
         $encryptedPath = "$env:GITHUB_WORKSPACE/NSI_encrypted.json"
         $aes = [System.Security.Cryptography.Aes]::Create()
         $aes.Key = $key$aes.GenerateIV()$
         iv = $aes.IV
         $encryptor = $aes.CreateEncryptor()
         $fsInput = [System.IO.File]::OpenRead($jsonPath)
         $fsEncrypted = [System.IO.File]::OpenWrite($encryptedPath)
         $fsEncrypted.Write($iv, 0, $iv.Length)
         $cs = New-Object System.Security.Cryptography.CryptoStream($fsEncrypted, $encryptor, [System.Security.Cryptography.CryptoStreamMode]::Write)
         $buffer = New-Object Byte[] 1024
         while (($read = $fsInput.Read($buffer, 0, $buffer.Length)) -gt 0) {
          $cs.Write($buffer, 0, $read)
          }
